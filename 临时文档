# 部署服务器脚本使用文档

> * menglei @ 2017.02.15
> * ly-menglei@163.com

### 操作说明（按照执行顺序）

* **创建服务器**
    1. 配置`create*S.txt`
        - 其中`#`开头的一行为注释行，创建添加脚本都不会读取该行的内容
        - batchID的概念，描述创建或添加服务器一个版本号，相同创建或添加的服务器拥有相同的batchID
        - 其余配置ip(多数为内网IP)以及端口，和一些必要的ID
    2. 运行`createAllServer.sh`
        - 此脚本会在目录下生成`*S.txt`


* **开服**
    1. 运行`runAllServer.sh` + batchID
        - 此程序接受一个参数batchID, "all"表示所有batchID
        - 此程序读取`*S.txt`文件，在其它非必要情况下请勿手动修改或删除`*S.txt`


* **检查服务器运行状态**
    1. 运行`checkRunningStatus.sh`
        - 此程序无任何参数
        - 此程序，读取`*S.txt`中的内容，对文件中的服务器进行检测


* **停服**
    1. 运行`stopAllServer.sh` + batchID
        - 危险操作，需要注意
        - 同样接受一个参数，batchID, "all"表示所有batchID
        - 此程序读取`*S.txt`文件，在其它非必要情况下请勿手动修改或删除`*S.txt`
        - 此程序运行结束后，会在6s后执行`checkRunningStatus.sh`进行校验。


* **更新服务器jar包等**
    1. 使用最新的jar包替换lib/下的jar包
    2. 配置localScripts/下的updateGScfg.txt文件，更新资源版本号
    3. 运行`checkRunningStatus.sh`
        - 确保服务器完全停止，没有运行的java程序
    4. 运行`updateAllServer.sh` + batchID
        - 此程序接受一个参数batchID, "all"表示所有batchID
        - 此程序读取`*S.txt`文件，在其它非必要情况下请勿手动修改或删除`*S.txt`


* **添加服务器**
    1. 配置`add*S.txt`(与配置`create*S.txt`相类似)
    2. 运行`add_GS_MS.sh`或`add_FS_GMS_ES_AS.sh`来添加服务器
        - 需要batchID,对应的为`add*S.txt`中刚刚配置的id
        - 一般gs ms 为一组，fs gms es as 为一组，以组为单位添加
        - 此程序会写入`*S.txt`文件
        - 添加完成后，通过`run/stopAllServer.sh` + batchID，来启动刚刚添加的服务器。


* **更新小活动**
    1. 小活动的配置放在了activities文件夹内，更新这个文件夹的内容。
    2. 运行脚本`updateActivities.sh`+批次号。


* **修改服务器资源版本号**
    > 此操作用来更新gs.cfg中的verResource和verPacket字段

    1. 修改verPacket需要停服，修改verResource不需要停服。
    2. 配置`localScripts/updateGScfg.txt`
    3. 运行`localScripts/updateGScfg.sh`

> operationLog.log 运行上述脚本会写入操作日志到此文件

### 附：
-------------------------------------------------
![Servers](./pic/servers.png)
>注：上图箭头方向表示主动连接方向

![dir](./pic/dir.png)
>上图：典型管理服服务器的目录结构

#### 目录描述
目录            | 描述
---------------|------------------------------
activities/    | 目录下存放的是配置的小活动。
as/            | 目录下为auctionServer 拍卖行服务器
conf/          | 目录下存放必要的启动服务器的数据
es/            | ExchangeServer
fs/            | FightServer
gms/           | GlobalMapserver
gs/            | GameServer
lib/           | 所有服务器启动需要的jar包
localScripts/  | 修改gs服务器中gs.cfg资源版本号的脚本
ms/            | MapServer
scripts/       | BI上报相关的一些脚本

>其中as/es/fs/gms 组成一组跨服服务器，一组gs/ms(一个gs可以对应多个ms)为一组游戏服务器，其中多个gs/ms组合，可以对应一个as/es/fs/gms组合

---------------------------------------------
# 配置craete*S.txt相关

> * 修改日期：2017.02.15
> * `create*S.txt`内容与`add*S.txt`内容大致是相同的，不再赘述

### createAS.txt
```
#batchID # Auction_IP  areaID   Auction_Host Auction_Port  AlarmServer port
1        192.168.10.138  200  192.168.10.138   7108         0.0.0.0     1191
```
第一位为批次号，第二部分为as对应服务器的内网ip，第三部分为大区id，第四部分同样为内网ip，第五部分为端口（端口一般不需要改），最后为报警服务器的Ip和端口的配置（下同）。这里重点说下报警服务器端口的配置：一台服务器上如果同时跑了两个服务，比如as和es同时跑在一台机器上，那么端口从1191开始，下一个服务的端口配置为1192依次递增（约定）。

### createES.txt
```
#batchID # Exchange_IP    Exchange_Host    Exchange_Port  AlarmServer port
1         192.168.10.138    192.168.10.138    7109        0.0.0.0     1191
```
同as的配置相类似（注：次此配置as与es在相同的机器上，所以内网ip相同）

### createFS.txt
```
#batchID #fightserverIP port areaID fightMapServer port        AlarmServer port
1       192.168.10.137  7104    200     192.168.10.137  7103   0.0.0.0     1191
```
第一位为批次号，第二部分为fs服务器的内网ip，第三部分为端口，第四部分为大区id,第五部分为fs内网ip，第六部分为端口

### crateGMS.txt
```
#batchID #MAP_IP         group  id  LocalMapClient port   GlobalMapServer port  FightMapClient port      AlarmServer port
1       192.168.10.130    200   0   127.0.0.1  1107    192.168.10.130    7105      192.168.10.137   7103    0.0.0.0     1191
```
第一部分为批次号，第二部分为gms的内网Ip，第三部分group对应为大区id，第四部分id，0表示为gms,大于0表示为正常的mapServer。127.0.0.1 和端口是写死的不用改。第二部分为gms的内网Ip端口。倒数第二项，FightMapClient对应的是fs的内网Ip

### createGS.txt
```
#batchID #GS_IP        id     zoneID   verPacket verResource mapMaxRoles        isVerify   mapHost mapPort       IDIPServer port        FightServer port        GlobalMapClient port    AuthClient port        AuctionClient port    ExchangeClient port        TlogClient port      webServer port  [BI]gameAppId    AlarmServer port
1       106.3.130.146 200001    1       1010      1              500              1        192.168.10.146 1107    192.168.10.146 1101    192.168.10.137 7104     192.168.10.130  7105    192.168.10.142 9100    192.168.10.138 7108    192.168.10.138  7109     192.168.10.141 9109   192.168.10.142 8080   10086        0.0.0.0     1191
```
这个配置比较多。直接调重点说。
第二部分GS_IP为gs服务器的外网ip，id为gsId,前3为“200”表示大区id，后面3为表示小区id。zoneID表示对应的小区id。

verPacket verResource 对应的资源版本号等信息，需要与客户端的相对应。
isVerify是否做登陆验证。

mapHost IDIPServer为gs服务器的内网ip，端口写死的不要改。

FightServer 填写fs对应的内网ip

GlobalMapClient填写对应的gms的内网ip

AuthClient 一般是填写idip的服务器内网地址。充值服务器的

AuctionClient 填写as服务器的内网ip。

ExchangeClient 填写es服务器的内网ip。（这里as和es在同一台机器上，所以是相同的）

TlogClient填写tlog服务器的内网Ip

> 前提，上面的这些服务器的内网都是打通的。

### createMS.txt
```
#batchID #MAP_IP       host           port    group  id  LocalMapClient port      GlobalMapServer port      FightMapClient port        AlarmServer port
1       106.3.130.131 192.168.10.131 1107    200001  1   192.168.10.146  1107      192.168.10.130    7105      192.168.10.137   7103    0.0.0.0     1191
1       106.3.130.131 192.168.10.131 1107    200001  2   192.168.10.146  1107      192.168.10.130    7105      192.168.10.137   7103     0.0.0.0     1191
```
map服务器性能一般为16核24G内存的配置，故在一台物理机上跑两个id不同的mapServer

第二第三部分为map服务器的外网ip和内网ip，group与createMS.txt中的id字段保持对应的关系

id来区分在两台机器上不同的mapServer(一般都是1或2)

LocalMapClient 填写对应的gs服务器的内网ip，

GlobalMapServer 字段填写gms的内网Ip

FightMapClient  填写fs的内网ip

--------------------------------
一般一个gs服务器对应2个ms服务器（同一台物理机上的2个ms）。
多个gs，连接相同的as,fs,es,gms。
